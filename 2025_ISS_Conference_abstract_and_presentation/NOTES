1. TITLE (dwa zdania o sobie)

2. INTRO
  - Perkel 2017 (Nature): "difficult to organize code logically, break it into reusable modules and develop tests to ensure the code is working properly"
  - https://doi.org/10.5194/gmd-12-2215-2019 (GMD Guidelines):
    "... models are run by a script, and all pre- and post-processing is scripted. These scripts themselves should then be archived and cited from the paper. All figures and tables must be scientifically reproducible from the scripts."

3. IN THIS TALK
  - journals enforce redproducibility against archived releases (which is great!)
  - no one enforces that the reprodibilitoty is maintained! (with ongoing developments, would be even better!)
  - this talk: how to approach maintainability of reprodicibility and what users & devs can gain

4. DEVS' PERSPECTIVE: storing notebooks in the repository implies challenges:
    - code compatibility
    - result verification
    - notebook sanity (nbqa, devps_tests, ...)
    - graphics (vector, animations)

5. DEV's...:   prerequisite: API design embracing modularity and inversion of control - it is not uncommon in atmospheric modeling for papers to use different simulation flow control or different parameterizations
      -> example implementation PySDM Formulae (with formulae variant choices from user scope, enabling each maintained notebook to use different constants, and physics formulae, in atmospheris modelling often there is no grand truth)
      -> side benefit: feasibility to engineer dimensional analysis of the code that can be switched on for testing, and swtiched off by default 

6. Tooling: e.g., pytest + notebook_vars -> notebooks as a source of test (edge) cases!
  
7 USERS' PERSPECTIVE
  - notebooks are great for tutorials, but only if compatibility is maintained (with CI automation!) - also for onboarding new developers
  - paper-author (compliance with journal requirements) / paper-reviewer perspectives
  - Colab

8. DEMO:
  - (1 min) github.com -> PySDM -> dokumentacja -> examples -> Colab -> run
  - (1 min) develop a change (PyCharm) + run smoke tests (first failure, then success)
  - (1 min) create & review a PR

9. GitHub Jupyter diffs (BTW, show_anim & show_plot)

10 OUTRO:
  - TAKE-HOME-MESSAGES:
    - PySDM & PyMPDATA & numba-mpi example: single-language HPC-, cloud-computing- and user-friendly tech stack covering sim, vis, analysis
    - CI-intergrated notebooks can help devs in maintaining test coverage, at the same time 
      ensuring consistent/up-to-date tutorials for users
    - maintenance of research-result reproducibility can support rather than be a challenge of ongoing project development

11. ZAJAWKA PROCEEDINGS

12. ACKNOWLEDGEMENTS (NCN, IDUB, NCAR MMM + open-atmos dev & user community)